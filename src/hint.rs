//! Hints to the implementation.
use super::{gl, GLEnum, NotSync};

/// Hint to the GL the desired quality to speed tradeoff of an operation.
///
/// These are implementation definened hints. The implementation may ignore
/// these values completely.
#[repr(u32)]
pub enum Mode {
    /// Use the most efficient method.
    Fastest = gl::FASTEST,
    /// Use the most correct or highest quality method.
    Nicest = gl::NICEST,
    /// No preference. This is the default value for all hints that accept a preference.
    DontCare = gl::DONT_CARE,
}
// Safety: is repr(u32) enum.
unsafe impl crate::GLEnum for Mode {}

/// Hints to the implementation.

pub struct Hint(pub(crate) NotSync);
impl Hint {
    /// Signal that you won't be compiling more shaders or programs.
    ///
    /// It is still valid to issue compilation and linking calls after this,
    /// but there may be a significant performance penalty.
    #[doc(alias = "glReleaseShaderCompiler")]
    pub fn release_compiler(&self) -> &Self {
        unsafe {
            gl::ReleaseShaderCompiler();
        }
        self
    }
    /// The quality of images generated by calls to `glGenerateMipmap`.
    #[doc(alias = "glHint")]
    #[doc(alias = "GENERATE_MIPMAP_HINT")]
    pub fn generate_mipmap(&self, mode: Mode) -> &Self {
        unsafe {
            gl::Hint(gl::GENERATE_MIPMAP_HINT, mode.as_gl());
        }
        self
    }
    /// The quality of values from `dFdx`, `dFdy`, and `fwidth` calls within
    /// fragment shaders.
    #[doc(alias = "glHint")]
    #[doc(alias = "FRAGMENT_SHADER_DERIVATIVE_HINT")]
    pub fn derivative(&self, mode: Mode) -> &Self {
        unsafe {
            gl::Hint(gl::FRAGMENT_SHADER_DERIVATIVE_HINT, mode.as_gl());
        }
        self
    }
}
